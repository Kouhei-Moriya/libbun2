
TopLevel   <- Expr / _ ;

_          <- ([ \t]+ / Comment)*;
Spacing    <- [ \t]+  ;
Comment    <- '/*' (!'*/' .)* '*/' / '//' (![\r\n] .)* [\r\n] ;
Name       <- {[A-Za-z_] [A-Za-z0-9_]*   #name};
Number     <- {[0-9]+                    #integer};
String     <- {'"' ('\\"' / !'"' .)* '"' #string};

Value      <- {'(' _ $Expr _ ')' #group} / String / Number / Name;

PostfixExpr <- Value ${ '[' $Expr ']' #index 
				/ '(' _ ($Expr (_ ',' _ $Expr)*)? _ ')' #call
				/ '.' $Name          #field
			}*;

UnaryExpr   <- PostfixExpr 
	/ { ('-' #minus / '+' #plus / '!' #not) $CastExpr};

CastExpr <- { ('(' $Type ')')+ $UnaryExpr #cast} / UnaryExpr;

Product    <- Value {$ _ ('*' #mul / '/' #div / '%' #mod) _ $Value}* ;
Sum        <- Product {$ _ ('+' #add / '-' #sub) _ $Product}*;
Expr       <- Sum;
Stmt       <- Expr;

Type        <- {[A-Za-z] [A-Za-z0-9_]*   #type};
Type        <- Type {$ '[]'             #atype} / Type;
Type        <- Type {$ '<' _ $Type (_ ',' _ $Type)? _ '>' #ptype} / Type;
TypeAnno    <- ':' _ Type;
Param       <- {$Name _ ($TypeAnno)? #param};
Params      <- {'(' _ ($Param ( _ ',' _ $Param)*)? _ ')' #params};

Function    <- {'function' Spacing $Name _ $Params _ ($TypeAnno)? _ $Block  #function};
TopLevel    <- Function / TopLevel;

Block <- {'{' (BlockIndent? ( ';' / $Stmt))* _ '}' #block};
BlockIndent <- [ \t\n]* ;

IfStmt      <- {'if' _ '(' _ $Expr _ ')' _ $Block (_ 'else' _? $(IfStmt / Block))? #if};
WhileStmt   <- {'while' _ '(' _ $Expr _ ')' _ $Block #while};
BreakStmt   <- {'break' #break};
ReturnStmt  <- {'return' (Spacing $Expr)? #return};
VarStmt     <- {'var' Spacing $Name _ ($TypeAnno)? _ '=' _ $Expr (_ 'in' _ $Block)? #var};
LetStmt     <- {'let' Spacing $Name _ ($TypeAnno)? _ '=' _ $Expr (_ 'in' _ $Block)? #let};

Stmt        <- IfStmt / WhileStmt / BreakStmt/ ReturnStmt / VarStmt / LetStmt / Stmt;
TopLevel    <- IfStmt / BreakStmt / LetStmt / TopLevel;

