
_      <- [ ]

Symbol <- {@symbol (![ \t\n] .)}
Name   <- {@name [A-z_] [A-z0-9_]* ('::' [A-z_] [A-z0-9_]*)?}
String <- {@string '"' (!'"' .)* '"'}
Expr   <- Name
Expr   <- String
Expr   <- {@int [0-9]+}
Expr   <- {[0-9]+ '.' [0-9]+}                    #Float
Expr   <- 'null'     #Null
Expr   <- 'true'     #True
Expr   <- 'false'    #False
Expr   <- '$' [0-9] (':' ('-'? [0-9])?)?         #Symbol

Type   <- {$Name}                             #Type
Type   <- {'Array<' $Type '>'}                #ArrayType
Type   <- {'Func<' $Type (',' $Type)? '>'}    #GenericType
TypeAnno <- ':' $Type

Expr <- {'(+++ ' $Expr ')'}                   #Plus
Expr <- {'(--- ' $Expr ')'}                   #Minus
Expr <- {'(!!! ' $Expr ')'}                   #Not
Expr <- {'(~~~ ' $Expr ')'}                   #Complement
Expr <- {'(group ' $Expr ')'}                 #Group
Expr <- {'(to ' $Type _ $Expr ')'}            #Cast
Expr <- {'(fmt ' $String (_ $Expr _ $String)* ')' } #Format

Expr <- {'(new ' $Type (_ $Expr (_ $Expr)*)? ')'}    #NewObject
Expr <- {'(array ' (_ $Expr (_ $Expr)*)? ')'}        #Array
Expr <- {'(map ' (_ $MapEntry (_ $MapEntry)*)? ')'}  #Map
MapEntry <- {'(kv ' $String _ $Expr ')'}             #MapEntry
Expr <- {'(tuple ' $Expr (_ $Expr)+ ')'}             #Tuple

Expr <- {'(&& ' $Expr _ $Expr ')'}        #And
Expr <- {'(|| ' $Expr _ $Expr ')'}        #Or

Expr <- {'(== ' $Expr _ $Expr ')'}        #Equals
Expr <- {'(!= ' $Expr _ $Expr ')'}        #NotEquals
Expr <- {'(< '  $Expr _ $Expr ')'}        #LessThan
Expr <- {'(> '  $Expr _ $Expr ')'}        #LessThanEquals
Expr <- {'(<= ' $Expr _ $Expr ')'}        #GreaterThan
Expr <- {'(>= ' $Expr _ $Expr ')'}        #GreaterThanEquals

Expr <- {'(+ ' $Expr _ $Expr ')'}         #Add
Expr <- {'(- ' $Expr _ $Expr ')'}         #Sub
Expr <- {'(* ' $Expr _ $Expr ')'}         #Mul
Expr <- {'(/ ' $Expr _ $Expr ')'}         #Div
Expr <- {'(% ' $Expr _ $Expr ')'}         #Mod

Expr <- {'(funccall ' $Expr (_ $Expr (_ $Expr)*)? ')'}          #FuncCall
Expr <- {'(send ' $Name _ $Expr (_ $Expr (_ $Expr)*)? ')'}      #MethodCall

Expr <- {'(field ' $Name _ $Expr ')'}                       #Field
Expr <- {'(index ' $Expr _ $Expr ')'}                       #Indexer

Stmt <- Expr

Stmt <- {'(= ' $LValue _ $Expr ')'}   #Assign

LValue <- Name
LValue <- {'(field ' $Expr _ $Name ')'}                       #Field
LValue <- {'(index ' $Expr _ $Expr ')'}                       #Indexer


Stmt  <- {'(if ' $Expr _ $Block _ $Block ')' }  #If
Stmt  <- {'(while ' $Expr _ $Block ')'}         #While
Stmt  <- {'(break)'}                            #Break
Stmt  <- {'(try ' $Block _ ('(catch ' $Name _ $Block ')')? _ ($Block)? ')'} #Try
Stmt  <- {'(throw ' $Expr ')'}                   #Throw
Stmt  <- {'(return ' $Expr ')'}                  #Return

Stmt  <- {'(var ' $Name _ $TypeAnno _ $Expr ($Block)?')'}     #Var
Stmt  <- {'(let ' $Name _ $TypeAnno _ $Expr ($Block)?')'}     #Let
Stmt  <- {'(define $Symbol _ $TypeAnno _ $String ')'}

Stmt  <- {'(function ' $Name _ $TypeAnno _ $Param _ $Block ')'}   #Function
Params <- {'(' ($Param)* ')'}             #Params
Param <- {'(param ' $Name _ $TypeAnno ')'}    #Param

Block <- {'(block' (_ $Stmt )*  ')'}   #Block





Block <- {'(empty)'}                      #Block
Block <- {'(block1 ' $Stmt ')'}           #Block
Block <- {'(block2 ' $Stmt _ $Stmt ')'}   #Block




