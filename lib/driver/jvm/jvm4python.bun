typedef String
typedef void
typedef Object

typedef Long
typedef Double
typedef Boolean

// statement definition
template #block(*): void {
	${BLOCK this}
}


template #if(cond : untyped, then : void) : void {
	${IF}
}

template #if(cond : untyped, then : void, else) : void {
	${IF}
}

template #while(cond : untyped, block : void) : void {
	${WHILE}
}

// expression definition.
template #group(x : untyped) : untyped {
	${x} ${IsStmtEnd}
}

template #integer(): untyped {
	${PUSH_AS_LONG} ${BOX long} ${IsStmtEnd}
}

template #float() : untyped {
	${PUSH_AS_DOUBLE} ${BOX double} ${IsStmtEnd}
}

template #true() : untyped {
	${PUSH_AS_BOOLEAN true} ${BOX boolean} ${IsStmtEnd}
}

template #false() : untyped {
	${PUSH_AS_BOOLEAN false} ${BOX boolean} ${IsStmtEnd}
}

template #string() : untyped {
	${PUSH_AS_STRING} ${IsStmtEnd}
}

// binary op definition
// ADD
template #add(x : untyped, y : untyped) : untyped {
	${x} ${y} ${INDY add bsmBinaryOp Object Object Object} ${IsStmtEnd}
}

//SUB
template #sub(x : untyped, y : untyped) : untyped {
	${x} ${y} ${INDY sub bsmBinaryOp Object Object Object} ${IsStmtEnd}
}

// MUL
template #mul(x : untyped, y : untyped) : untyped {
	${x} ${y} ${INDY mul bsmBinaryOp Object Object Object} ${IsStmtEnd}
}

// DIV
template #div(x : untyped, y : untyped) : untyped {
	${x} ${y} ${INDY div bsmBinaryOp Object Object Object} ${IsStmtEnd}
}

// MOD
template #mod(x : untyped, y : untyped) : untyped {
	${x} ${y} ${INDY mod bsmBinaryOp Object Object Object} ${IsStmtEnd}
}

// EQ
template #eq(x : untyped, y : untyped) : untyped {
	${x} ${y} ${INDY eq bsmCompOp Boolean Object Object} ${IsStmtEnd}
}

// NOTEQ
template #noteq(x : untyped, y : untyped) : untyped {
	${x} ${y} ${INDY noteq bsmCompOp Boolean Object Object} ${IsStmtEnd}
}

// LT
template #lt(x : untyped, y : untyped) : untyped {
	${x} ${y} ${INDY lt bsmCompOp Boolean Object Object} ${IsStmtEnd}
}

// LTE
template #lte(x : untyped, y : untyped) : untyped {
	${x} ${y} ${INDY lte bsmCompOp Boolean Object Object} ${IsStmtEnd}
}

// GT
template #gt(x : untyped, y : untyped) : untyped {
	${x} ${y} ${INDY gt bsmCompOp Boolean Object Object} ${IsStmtEnd}
}

// GTE
template #gte(x : untyped, y : untyped) : untyped {
	${x} ${y} ${INDY gte bsmCompOp Boolean Object Object} ${IsStmtEnd}
}

// unary op definition
// NOT
template #not(x : untyped) : untyped {
	${x} ${INDY not bsmUnaryOp Object Object} ${IsStmtEnd}
}

// PLUS
template #plus(x : untyped) : untyped {
	${x} ${INDY plus bsmUnaryOp Object Object} ${IsStmtEnd}
}

// MINUS
template #minus(x : untyped) : untyped {
	${x} ${INDY minus bsmUnaryOp Object Object} ${IsStmtEnd}
}

// COMPL
template #compl(x : untyped) : untyped {
	${x} ${INDY compl bsmUnaryOp Object Object} ${IsStmtEnd}
}

// conditional operator
// And
template #and(x : untyped, y : untyped) : untyped {
	${AND} ${BOX boolean} ${IsStmtEnd}
}

// Or
template #or(x : untyped, y : untyped) : untyped {
	${OR} ${BOX boolean} ${IsStmtEnd}
}

// collection
template #array(*) : untyped {
	${NEW_ARRAY} ${IsStmtEnd}
}

template #map(*) : untyped {
	${NEW_MAP} ${IsStmtEnd}
}

template #index(recv : untyped, index : untyped) :untyped {
	${recv} ${index} ${INDY get bsmMethod Object Object Object} ${IsStmtEnd}
}

template #apply(t : untyped, arg : untyped) : untyped {
	${APPLY} ${IsStmtEnd}
}

template #name() : untyped {
	${NAME} ${IsStmtEnd}
}

template #assign(left : untyped, right : untyped) : void {
	${PY_ASSIGN}
}

template #trinary(cond : untyped, then : untyped, else : untyped) : untyped {
	${TRINARY} ${IsStmtEnd}
}

template #print(x) : void {
	${x} ${PRINT}
}

template #function(name, params, block : void) : void {
	${DEFUNC}
}

template #return(expr : untyped) : void {
	${expr} ${RETURN_STATEMENT}
}
