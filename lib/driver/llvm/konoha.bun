
//typedef void;
typedef NullType;
typedef i1;
typedef i16;
typedef i32;
typedef i64;
typedef float;
//typedef unicode;


// type
template #Tvar(): void {
	opaque
}

template #Tvoid(): void {
	void
}

template #Tboolean(): i1 {
	i1
}

template #Tint16(): i16 {
	i16
}

template #Tint32(): i32 {
	i32
}

template #Tint64(): i64 {
	i64
}

template #Tint(): i64 {
	i64
}

template #Tdouble(): float {
	float
}

//template #TString(): unicode {
//	unicode
//}

// literal

template #null(): NullType {
	null
}

template #true(): i1 {
	true
}

template #false(): i1 {
	false
}

template #int(): i64 {
	${textof this}
}

template #float(): float {
	${textof this}
}

//template #string(): unicode {
//	u"${textof this}"
//}

template #conv(x: float): i64 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = fptosi ${typeof x} ${x} to ${typeof this}${endstmt}%Temp__${getnum 0}
}


template #conv(x: i64): float {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = sitofp ${typeof x} ${x} to ${typeof this}${endstmt}%Temp__${getnum 0}
}

bun<T> #group(expr :T) :T {
	${expr}
}

template #not(x: i1) :i1 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = xor ${typeof x} ${x}, 1${endstmt}%Temp__${getnum 0}
}

template #plus(x: i64) :i64 {
	${x}
}

template #plus(x: float) :float {
	${x}
}

template #minus(x: i64) :i64 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = sub i64 0, ${x}${endstmt}%Temp__${getnum 0}
}

template #minus(x: float) :float {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = fsub float -0.0, ${x}${endstmt}%Temp__${getnum 0}
}

template #compl(x: i64) :i64 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = xor ${typeof x} ${x}, -1${endstmt}%Temp__${getnum 0}
}//

//TODO
template #and(x: i1, y: i1): i1 {
	${x} and ${y}
}

//TODO
template #or(x: i1, y: i1): i1 {
	${x} or ${y}
}

bun<T> #assign(x: T, y: T): void {
	${startstmt}store ${typeof y} ${y}, ${typeof x}* ${x}${endstmt}
}

//bun<T> #add(x: T, y: T) :T {
//	(${x} + ${y})
//}

//template #add(x: unicode, y: any): unicode {
//	(${x} + ustr(${y}))
//}

//template #add(x: unicode, y: unicode): unicode {
//	${x} + ${y}
//}

template #add(x: i64, y: i64): i64 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = add ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #add(x: float, y: float): float {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = fadd ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #sub(x: i64, y: i64): i64 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = sub ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #sub(x: float, y: float): float {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = fsub ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #mul(x: i64, y: i64): i64 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = mul ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #mul(x: float, y: float): float {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = fmul ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #div(x: i64, y: i64): i64 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = sdiv ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #div(x: float, y: float): float {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = fdiv ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #mod(x: i64, y: i64): i64 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = srem ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #mod(x: float, y: float): float {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = frem ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

//bun<T> #eq(x: T, y: T): i1 {
//	(${x} == ${y})
//}

template #eq(x: i1, y: i1): i1 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = icmp eq ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #eq(x: i64, y: i64): i1 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = icmp eq ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #eq(x: float, y: float): i1 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = fcmp oeq ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

//bun<T> #noteq(x: T, y: T): i1 {
//	(${x} != ${y})
//}

template #noteq(x: i1, y: i1): i1 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = icmp ne ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #noteq(x: i64, y: i64): i1 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = icmp ne ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #noteq(x: float, y: float): i1 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = fcmp one ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #lt(x: i64, y: i64): i1 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = icmp slt ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #lt(x: float, y: float): i1 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = fcmp olt ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #lte(x: i64, y: i64): i1 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = icmp sle ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #lte(x: float, y: float): i1 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = fcmp ole ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #gt(x: i64, y: i64): i1 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = icmp sgt ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #gt(x: float, y: float): i1 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = fcmp ogt ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #gte(x: i64, y: i64): i1 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = icmp sge ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

template #gte(x: float, y: float): i1 {
	${startstmt}${reservenum 1}%Temp__${getnum 0} = fcmp oge ${typeof x} ${x}, ${y}${endstmt}%Temp__${getnum 0}
}

//TODO
template #apply(f, args) {
	${f}(${list args ", "})
}

//TODO
template #let(name, type, value): void {
	${value} ${name} = ${value}
}

template #var(name, type, value): void {
	%${name} = alloca ${type}
	${startstmt}store ${typeof value} ${value}, ${type}* %${name}${endstmt}
}

template #function(name, params, rtype, block): void {
	define ${rtype} @${name} (${list params ", "}) {
	${begin}${label Entry}${block}${end}
	}
}

template #name(): any {
	${textof this}
}

template #param(name, type): void {
	${type} %${name}
}

template #block(*): void {
	${statement this}
}

template #if(x: i1, then: void): void {
	${reservenum 1}${startstmt}br ${typeof x} ${x}, label %IfThen__${getnum 0}, label %IfEnd__${getnum 0}${endstmt}
	${label IfThen 0}${then}
	br label %IfEnd__${getnum 0}
	${label IfEnd 0}
}

template #if(x: i1, then: void, else: void): void {
	${reservenum 1}${startstmt}br ${typeof x} ${x}, label %IfThen__${getnum 0}, label %IfElse__${getnum 0}${endstmt}
	${label IfThen 0}${then}
	br label %IfEnd__${getnum 0}
	${label IfElse 0}${else}
	br label %IfEnd__${getnum 0}
	${label IfEnd 0}
}

template #return(): void {
	${startstmt}ret void${endstmt}
}

template #return(expr): void {
	${startstmt}ret ${typeof expr} ${expr}${endstmt}
}

