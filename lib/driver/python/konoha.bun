
//typedef void;
typedef NullType;
typedef bool;
typedef int;
typedef float;
typedef unicode;

// type

bun #Tvoid(): void {
	void
}

bun #Tboolean(): bool {
	bool
}

bun #Tint(): int {
	int
}

bun #Tdouble(): float {
	float
}

bun #TString(): unicode {
	unicode
}

// literal

bun #null(): NullType {
	None
}

bun #true(): bool {
	True
}

bun #false(): bool {
	False
}

bun #integer(): int {
	${textof this}
}

bun #float(): float {
	${textof this}
}

bun #string(): unicode {
	u"${textof this}"
}

bun #conv(x: float): int {
	int(${x})
}

bun #conv(x: int): float {
	float(${x})
}

bun<T> #group(expr :T) :T {
	(${expr})
}

bun #not(x: bool) :bool {
	!${x}
}

bun #plus(x: int) :int {
	+${x}
}

bun #plus(x: float) :float {
	+${x}
}

bun #minus(x: int) :int {
	-${x}
}

bun #minus(x: float) :float {
	-${x}
}

bun #compl(x: int) :int {
	~${x}
}

bun #and(x: bool, y: bool): bool {
	${x} and ${y}
}

bun #or(x: bool, y: bool): bool {
	${x} or ${y}
}

bun<T> #assign(x: T, y: T): void {
	${x} = ${y}
}

bun<T> #add(x: T, y: T) :T {
	(${x} + ${y})
}

bun #add(x: unicode, y: any): unicode {
	(${x} + ustr(${y}))
}

bun #add(x: unicode, y: unicode): unicode {
	${x} + ${y}
}

bun<T> #sub(x: T, y: T): T {
	(${x} - ${y})
}

bun<T> #mul(x: T, y: T): T {
	(${x} * ${y})
}

bun<T> #div(x: T, y: T): T {
	(${x} / ${y})
}

bun<T> #mod(x: T, y: T): T {
	(${x} % ${y})
}

bun<T> #eq(x: T, y: T): bool {
	(${x} == ${y})
}

bun<T> #noteq(x: T, y: T): bool {
	(${x} != ${y})
}

bun<T> #lt(x: T, y: T): bool {
	(${x} < ${y})
}

bun<T> #lte(x: T, y: T): bool {
	(${x} <= ${y})
}

bun<T> #gt(x: T, y: T): bool {
	(${x} > ${y})
}

bun<T> #gte(x: T, y: T): bool {
	(${x} >= ${y})
}

bun #apply(f, args) && typecheck() {
	${f}(${list args ", "})
}

bun #let(name, type, value): void && letvar() {
	${value} ${name} = ${value}
}

bun #var(name, type, value): void && letvar() {
	${name} = ${value}
}

bun #function(name, params, rtype, block): void && letvar() {
	def ${push name}(${list params ", "}): ${begin} ${block} ${end}
}

bun #param(name, type): void {
	${name}
}

bun #block(*): void && typecheck() {
	${statement this}
}

bun #if(x: bool, then: void): void {
	if ${x}: ${begin} ${statement then} ${end}
}

bun #if(x: bool, then: void, else: void): void {
	if ${x}: ${begin} ${statement then} ${end}
	else: ${begin} ${statement else} ${end}
}

bun #return(): void && typecheck() {
	return
}

bun #return(expr): void && typecheck() {
	return ${expr}
}

